★객체 및 클래스☆

	객체는 실제 엔터티나 개념을 나타내는 클래스의 인스턴스다.
	클래스는 개체의 속성(데이터)과 메서드(동작)를 정의하는 청사진 역할을 한다.

☆캡슐화★

	캡슐화에는 클래스 내에서 데이터와 메소드를 묶어 객체의 내부 상태를 숨기는 작업이 포함된다.
	데이터에 대한 액세스는 잘 정의된 인터페이스(메서드)를 통해 제어되어 데이터 보안과 무결성을 	향상한다.

★상속☆

	상속은 클래스(하위클래스)가 다른 클래스(슈퍼클래스)로부터 속성과 메소드를 상속받을 수 있도	록 해준다.
	코드 재사용을 촉진하고 클래스 간의 계층적 관계를 촉진한다.

☆다형성★

	다형성을 통해 서로 다른 클래스의 객체가 공통 인터페이스를 공유하는 경우 상호 교환적으로 처	리될 수 있다.
	코드 설계의 유연성과 확장성을 향상시켜 보다 일반적이고 적응 가능한 솔루션을 허용한다.

★추상화☆

	추상화에는 불필요한 세부 사항을 숨기고 필수 특성에 초점을 맞춰 복잡한 시스템을 단순화하는 	작업이 포함된다.
	클래스와 객체는 세부 사항을 캡슐화하고 관련 기능만 노출하여 추상화를 제공한다.

☆모듈화★

	모듈화란 시스템을 더 작고 관리 가능한 구성 요소(클래스/모듈)로 나누는 것을 의미한다.
	응집력 있는 단위 내에서 기능을 분리하여 코드 구성, 재사용성 및 유지 관리성을 촉진한다.

★연관, 집합 및 구성☆

	연관(Association)은 클래스 간의 관계를 나타내며, 한 클래스가 다른 클래스와 관련되어 있음을 나	타낸다.
	집합과 구성은 개체 간의 소유권 또는 포함 관계를 설명하는 연관 형태이다.
	집합은 개체가 서로 독립적으로 존재할 수 있는 "has-a" 관계를 의미하는 반면, 구성은 개체가 전	체의 일부인 더 강력한 소유권 관계를 의미한다.

☆디자인 패턴★

	디자인 패턴은 소프트웨어 디자인에서 직면하는 일반적인 문제에 대한 재사용 가능한 솔루션이다.
	유연하고 확장 가능하며 유지 관리 가능한 객체 지향 시스템을 설계하기 위한 검증된 접근 방식을 	제공한다.

★객체 지향 분석 및 설계(OOAD)☆

	OOAD는 객체지향 원리를 사용하여 소프트웨어 시스템을 분석, 설계, 모델링하는 방법론이다.
	요구사항 수집, 시스템 모델링, 아키텍처 설계 등의 활동이 포함되며 효과적인 객체 지향 솔루션을 	만드는 데 중점을 둔다.
	이러한 원칙을 이해하고 적용함으로써 개발자는 객체 지향 프로그래밍 패러다임을 사용하여 강력	하고 모듈식이며 유지 관리가 가능한 소프트웨어 시스템을 만들 수 있다.