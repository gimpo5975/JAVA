▣ 제네릭 (Generic)  => 제네릭은 클래스 내에서 사용되는 타입을 클래스가 정의할 때가 아닌 객체를 생성할 때 정의하겠다는 의미
	- 하나의 코드를 다양한 타입의 객체에 재사용하는 객체 지향 기법
	- 클래스, 인터페이스, 메서드를 정의할 때 타입을 변수로 사용
	- 장점 
		. 컴파일할 때 타입을 점검하기 때문에 실행 도중 발생할 오류를 미리 방지할 수 있음
		. 불필요한 타입 변환이 없어 프로그램 성능이 향상된다.

1. 제네릭 클래스와 인터페이스
	- 타입을 변수로 사용하는 클래스와 인터페이스
	- <>(다이아몬드연산자) 내부에 타입 매개변수를 표시
	- 타입매개변수는 객체를 생성할 때 구체적인 타입으로 대체함
	- 제네릭 클래스의 타입 매개변수는 필드나 메서드의 타입

	- 타입매개변수 : 영문대문자면 어떤 것이 사용 가능
		. 일반 타입	T  	type
		. 원소(요소) 	E	element
		. 키		K	key
		. 숫자		N	number
		. 값		V 	value 

	- 제네릭 클래스의 생성자
		제네릭클래스<적용할타입> 변수 = new 제네릭클래스<적용할타입>( );
		제네릭클래스<적용할타입> 변수 = new 제네릭클래스<>( );
	- 기본타입(int, long, byte, boolean,...)은 사용할 수 없고, 참조 타입만 사용 가능

2. 제네릭 상속 및 타입 한정
     1) 부모 타입 한정(=제한)
	- 자식 객체를 부모 타입 변수에 대입
	- 타입 매개변수의 범위를 특정 타입으로 제한
		. < T extends 특정 클래스> 반환타입 메서드명(..){  }
		. < T extends 인터페이스> 반환타입 메서드명(..){  }
     2) 자식 타입 한정(=제한)		
		. < T super 특정 클래스> 반환타입 메서드명(..){  }
		. < T super 인터페이스> 반환타입 메서드명(..){  }

     3) 와일드 카드 <?> : 미지의 타입
		. 부모 타입 제한 : < ? extends 부모 클래스 >
		. 자식 타입 제한 : < ? super 자식 클래스 >

3. 제네릭 메소드
	- 제네릭 메소드는 제네릭 클래스뿐만 아니라 일반 클래스의 멤버도 될 수 있다.
 	- 일반 클래스에서 제네릭 메소드를 정의할 때는 타입 매개변수를 반환 타입 앞에 둠
	  [접근제한자]<타입매개변수> 반환타입 메소드명(..) {  }

	- 제네릭 메소드의 타입 매개변수는 메소드의 반환 타입이나 매개변수의 타입으로 사용할 수 있음
	- 제네릭 메소드를 호출할 때는 컴파일러가 매개변수 값의 타입을 보고 구체적인 타입을 추정할 수 있어 생략 가능
----------------------
▣  compareTo(Object obj)
	- 값을 비교하고 결과로 정수값(int, 1, 0, -1)을 반환
	- 비교할 값이 매개값으로 받은 값보다 크면 : 1을 반환
              (문자나 문자열은 사전순으로 앞에 있는 것이 작은 것으로 인식)
	- 비교할 값이 매개값으로 받은 값보다 작으면 : -1을 반환
        - 비교할 값이 매개값으로 받는 값과 같으면 : 0을 반환
		비교할값 compareTo(매개값)
	- Interface Comparable<T>의 단 하나뿐인 추상 메소드  : int compareTo(T o);

----------------------------------------------------
<제네릭을 사용하기 전>

package genericexam2.score;

public class EnglishScore implements Comparable<EnglishScore>{ //extends Object 생략되어 있음
	//필드 - 인스턴스 필드(객체가 생성되어야지 메모리에 올라간다)
	String name;
	int score;
	
	//생성자 - 객체를 초기화, 생성자 없으면 객체를 만들 수 없다.
	//        생성자 아무것도 없으면 기본생성자를 컴파일러가 컴파일시 삽입
	
	public EnglishScore(String name, int score) {
		super();  //Object 클래스를 초기화
		this.name = name;
		this.score = score;
	}
			
	@Override  //재정의, Comparable의 단하나인 추상 메소드를 
	public int compareTo(EnglishScore o) {
		if(this.score > o.score) { 
			return 1; 
		}else if(this.score == o.score) {
			return 0;
		}else {
			return -1;
		}
	}

    @Override // 재정의, Object의 toString()을 오버라이딩
    public String toString() {
    	return name + " , " + score;
    }
}
----------------
package genericexam2.score;

public class MatScore implements Comparable<MatScore>{ //extends Object 생략되어 있음
	//필드 - 인스턴스 필드(객체가 생성되어야지 메모리에 올라간다)
	String name;
	int score;
	
	//생성자 - 객체를 초기화, 생성자 없으면 객체를 만들 수 없다.
	//        생성자 아무것도 없으면 기본생성자를 컴파일러가 컴파일시 삽입
	
	public MatScore(String name, int score) {
		super();  //Object 클래스를 초기화
		this.name = name;
		this.score = score;
	}
			
	@Override  //재정의, Comparable의 단하나인 추상 메소드를 
	public int compareTo(MatScore o) {
		if(this.score > o.score) { 
			return 1; 
		}else if(this.score == o.score) {
			return 0;
		}else {
			return -1;
		}
	}

    @Override // 재정의, Object의 toString()을 오버라이딩
    public String toString() {
    	return name + " , " + score;
    }
}
--------------------

package genericexam2.score;

public class ScoreMain {
   //#1. 영어 최고점수를 찾는 메소드 - findBest(EngLishScore[] engArr) : 일반 메소드로 작성
	public static EnglishScore findBest(EnglishScore[] engArr) {
		//#1) max을 찾기 위해, 배열의 처음 요소의 값을 max에 담기
		EnglishScore max = engArr[0];
		
		//#2) 최고 점수 찾기
		for(int i=0; i<engArr.length; i++) {
			//비교하기 - 큰값 찾기
			if(max.compareTo(engArr[i]) < 0) { 
				    //음수가 나온다는 것은 비교값인 max가 더 작다는 것
				    // max에 매개값을 담기
				max = engArr[i];			
			}//end of if
			 
		}//end of for
		
		return max ; //최댓값을 가지고 있는 객체를 리턴하기
	}
	
	//#2. 수학 최고 점수를 찾는 메소드 - 일반 메소드로 작성, findBest1(MatScore[] matArr)
	public static MatScore findBest1(MatScore[] matArr) {
		MatScore max = matArr[0];
		
		for(int i=0; i<matArr.length; i++) {
			if(max.compareTo(matArr[i]) < 0) {
				max = matArr[i];
			}
		}
		return max;
	
	}
	
	
	//#3. 메인 메소드
	public static void main(String[] args) {
		EnglishScore[] engArr = {
				new EnglishScore("홍길동", 90),
				new EnglishScore("우영우", 89),
				new EnglishScore("최수연", 97),
				new EnglishScore("이준호", 67),
				new EnglishScore("정명석", 48)
		};
		MatScore[] matArr = {
				new MatScore("홍길동", 55),
				new MatScore("우영우", 89),
				new MatScore("최수연", 70),
				new MatScore("이준호", 96),
				new MatScore("정명석", 60)
		};
				
		System.out.println("영어 최고 점수 : " + findBest(engArr));
		System.out.println("수학 최고 점수 : " + findBest1(matArr));
		
		
	}

}
========================================================
<제네릭 메소드로 변경한 후>


package genericexam2.score;

public class ScoreGenericeMain {
	//#1. Generice 메소드를 이용 
	//    [접근제한자] <타입> 반환타입 메소드명(매개변수,...){}
	//                     compareTo를 쓰기 위해 부모타입을 제한
	// Comparable은 EnglishScore와 MatScore 구현하고 있음
	public static <T extends Comparable<T>> T findBest(T[] score) {
		T max = score[0];
		
		for(int i=0; i<score.length; i++) {
			
			if(max.compareTo(score[i])<0) {
				max = score[i];
			}//end of if
		}//end of for
		return max;
	}

	public static void main(String[] args) {
		EnglishScore[] engArr = {
				new EnglishScore("홍길동", 90),
				new EnglishScore("우영우", 89),
				new EnglishScore("최수연", 97),
				new EnglishScore("이준호", 67),
				new EnglishScore("정명석", 48)
		};
		MatScore[] matArr = {
				new MatScore("홍길동", 55),
				new MatScore("우영우", 89),
				new MatScore("최수연", 70),
				new MatScore("이준호", 96),
				new MatScore("정명석", 60)
		};
				
		System.out.println("영어 최고 점수 : " + findBest(engArr));
		System.out.println("수학 최고 점수 : " + findBest(matArr));
		
		
	}
}
