< Collections Framework >
1. 컬렉션 
	- 객체의 저장
   프레임워크 : 사용 방법을 정해 놓은 라이브러
2. Collection Framework의 인터페이스
	- java.util 패키지 안에 위치
	1) List : 
		- 순서가 있는 데이터 집합
		- 데이터 중복 가능
		- 같은 자료형 저장 가능
		- 저장 공간 동적으로 처리
	 	- 객체를 인덱스로 관리하기 때문에 객체를 저장하면 인덱스가 부여되고
		   인덱스를 이용해서 객체를 추가, 삽입, 삭제를 할 수 있음
		- ArrayList(단일쓰레드환경) : 삽입/삭제는 LinkedList에 비해 느리나
			 검색 속도는 빠름(인덱스로 검색하기 때문)
		- LinkedList : 삽입/삭제는 ArrayList에 비해 빠르나, 검색 속도는 느림
		- Stack : Vector 클래스를 상속 받음
		- Vector(멀티쓰레드 환경에 사용) : ArrayList와 동일한 내부 구조 가짐
			동기화된 메소드로 구성되어 있기 때문에 멀티 쓰레드가 동시에 
			Vector() 메소드를 실행할 수 없음.
			따라서 멀티 쓰레드 환경에서는 안전하게 객체를 추가 또는 삭제할 수 있음

	    	비교) 배열 - 한 번 저장 공간을 확보하면 다시 변경 불가
	                     List - 저장공간이  동적으로 확보
	2) Set : 순서가 없는 데이터 집합
	 	중복을 허용하지 않음
		HashSet, TreeSet
	3) Map : 키(Key)와 값(value)의 쌍으로 이루어진
		데이터 집합
		순서가 없음
		Key는 중복 허용하지 않음
		value 중복 허용
		HashMap, TreeMap, Hashtable, Properties ...

3. List 컬렉션에 사용하는 메소드
	boolean add(E element) : 주어진 객체를 맨 끝에 추가
	void add(int index, E element) : 주어진 인덱스에 객체를 추가
	set(int index, E element) : 주어진 인덱스에 저장된 객체를 주어진 객체로 변경
	E get(int index) : 주어진 인덱스에 저장된 객체를 리턴(반환)
	int size() : 저장되어 있는 전체 객체 수
		비교) 배열 - 배열명.length,   문자열 - 문자열.length()
	boolean isEmpty() : 컬렉션이 비어 있는지 조사
	void clear() : 저장된 모든 객체를 삭제
	E remove(int index) : 주어진 인덱스에 저장된 객체를 삭제
	boolean remove(Object o) : 주어진  객체를 삭제

4. Set 컬렉션
	- 순서가 없으며, 중복되지 않는 객체를 저장하는 자료 구조 지원
	- 중복을 배제
	- 인덱스가 없어 저장 순서 무시
	- Set 컬렉션은 hashCode()와 equals를 통해서 같은 객체인지 확인 필요
		 	   같고        	 	 true
		hashCode() -----------> equals() ----------------> 동일객체
		  다르면                 false
		다른 객체		  다른 객체


5. Map 컬렉션
	- 주로 검색용 자료구조
	- Key와 value 쌍(Map.Entry)으로 구성된 객체를 저장하는 자료 구조
	- Key는 중복 저장 불가
	- value는 중복 가능
	- 인덱스가 없으며 Key와 값만 있음
	- 구현 클래스 : HashMap, HashTable, TreeMap

	V put(K key, V value) : 입력 매개변수 키, 값을 Map에 추가
	boolean containsKey(Object Key) : 주어진 키가 있는지 여부 
	boolean containsValue(Object vlue) : 주어진 값이 있는지 여부

	Set<Map.Entry<K,V>> entrySet() : 키와 값의 쌍으로 구성된 모든 Map.Entry 객체을 Set에 담아서 리턴
	
	V get(Object key) : 주어진 키가 있는 값을 리턴
 	boolean isEmpty() : 컬렉션이 비어 있는지 여부
	Set<K> keyset() : 모든 키를 Set객체에 담아서 리턴
	int size() : 저장된 키의 총 수
	
	나머진 교재 참조


6. Stack
	- LIFO(Last In First Out) : 가장 마지막에 저장한 데이터가 가장 먼저 꺼내는 것
	- 팬케잌, 접시쌓아 놓고 사용하기....
	- 수식계산, 수식괄호검사, 워드프로세서 undo/redo, 웹브라우저의 뒤로/앞으로
	- ArrayList 
	- push(저장), pop(추출)
	
	boolean empty() : Stack이 비어 있는지 알려주기
	Object peek() : Stack의 맨 위에 저장된 객체를 반환
			pop()스택에서 자료를 꺼내는 것이라면
			peek()은 객체를 꺼내는 것이 아니라 확인만
	Object pop() : Stack에서 맨 위의 저장된 객체를 꺼낸다
	Object push(Object item) : Stack에 객체를 저장
	그 외에는 책을 참조

7. Queue
	- FIFO(First In First Out) : 먼저 저장된 데이터가 가장 먼저 처리 
	- 은행 대기표, 최근 사용문서, 인쇄작업 대기 목록, 버퍼(buffer)
	- LinkedList

	- offer(저장), poll(데이터 추출)
	boolean add(Object o) : 지정된 객체를 Queue에 추가
				성공하면 true를 반환
	Objcet remove() : Queue에서 객체를 꺼내 반환, 비어 있으면 예외 발생
	Object element() : 삭제없이 요소를 읽어옴
	Object offer(Object o) : Queue에 객체를 저장
	Object poll() : Queue에서 객체를 꺼내서 반환, 비어 있으면 null 반환
	Object peek() : 삭제없이 요소를 읽어 옴, 비어 있으면 null 반환	





