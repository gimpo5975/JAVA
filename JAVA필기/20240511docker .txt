이미지 확인 : docker images  

이미지 다운로드 : docker pull hello-world 

컨테이너 생성 : docker run --name hello-world hello-world

컨테이너 확인 : docker ps -a

docker run은이미지가 없으면 다운로드 받아서 컨테이너로 생성해서 실행

docker run --name 컨테이너이름 옵션 이미지이름

-d : daemon으로 실행

docker run -d --name container-test1 ubuntu:14.04

-i
-t : 터미널로 접속이 가능하도록 해 줄 때 -it 옵션을 사용
	데이터베이스 같은 경우 설정 파일을 수정헤야 할 때 터미널로 접속해서 수정 작업을 할 수 있습니다.

-p 외부에서 접속할 포트 번호 : 컨테이너 내외부의 포트번호

-p 3306:3306 -> 내부에서 사용하는 3306번 포트를 외부의 3306번 과 포워딩해서 외부에서는 3306으로 접속하도록 합니다

--rm: 컨테이너를 종료할 때 컨테이너를 삭제하는 옵션

-e : 환경변수 

아파치 웹 서버 이미지 일름은 httpd
docker run --name 이름 httpd

nginx 이미지를 컨테이너로 생성
docker run --name webserver1 nginx

nginx의 80번 포트를 외부에서 접속할 수 있도록 컨테이너 생성
docker run -d -p 80:80 --name webserver3 nginx

컨테이너와 호스트 간에 파일 복사
docker cp 호스트경로 컨테이너이름:컨테이너 경로

- apache webserver는 이미지 이름이 httpd 이고 사용하는 포트는 80번입니다.
docker run --name webserver -d -p 80:80 httpd

웹 서버의 index.html을 현재 컴퓨터에 가져오기
docker cp webserver:/usr/local/apache2/htdocs/index.html index.html

수정한 index.html 도커에 넣기
docker cp index.html webserver:/usr/local/apache2/htdocs/index.html 

컨테이너를 이미지로 만들기
docker commit -a "메시지" 컨테이너이름 이미지이름

webserver라는 컨테이너를 adamweb 이라는 이미지로 만들기
docker commit -a "imagecreate" webserver adamweb

도커허브에 업로드 하기
이미지이름 변경 : docker tag 이미지이름 계정이름/이미지이름:버전

이미지 업로드 : docker push 계정이름/이미지이름:버전
docker push wonjungkim/webserver

언제든지 다운로드 받아서 저 이미지 사용 가능

docker run --name springapiserver -dit -p 80:80 /apiserver


도커로그인
docker login


MySQL 컨테이너 생성

docker run --name 컨테이너이름 -dit -p 포트번호 -e
MYSQL_ROOT_PASSWORD=root비밀번호 -e 
MYSQL_DATABASE=db -e 
MYSQL_USER=root계정 -e
MYSQL_PASSWORD=root비밀번호
mysql --character-set-server=utf8mb4 --collation-
server=utf8mb4_unicode_ci --default-authentication-
plugin=mysql_native_password

실제 명령어
docker run --name mysqlcontainer -dit -p 9900:3306 -e MYSQL_ROOT_PASSWORD=my1234 -e MYSQL_DATABASE=wordpress000db -e MYSQL_USER=wonjung -e MYSQL_PASSWORD=my1234 mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password

루트로 간단하게 접속
docker run --name mysqlcon -dit -p 9999:3306 -e MYSQL_ROOT_PASSWORD=myrootpass mysql:latest

IaC(Infra as Code) : 코드형 인프라
 수동 프로세스가 아니라 코드를 통해서 인프라를 관리하고 프로비저닝(배포) 하는 것
 인프라 사양을 담은 구성 파일을 이용해서 구성을 편집하고 배포하는 것

Docker에서는 Dockerfile과 docker-compose를 이용해서 코드형 인프라를 구현합니다.

Spring Boot Application을 이미지로 만들어서 실행

이렇게 하는 이유는 스프링으로 애플리케이션을 만들어서 다른 곳에서 실행을 하고자 하는 겨웅 그 곳에 직접 자바를 설치하고 스프링을 설치해서 실행해야합니다.

이렇게 하면 사람이 하는 것이므로 실수를 할 수 있게 됩니다.

이런 부분을 사람이 직접 하지 않고 코드가 할 수 있도록 하면 일관성이 있게 작업을 수행할 수 있습니다.

최근에는 애플리케이션을 Dockerfile을 이용해서 이미지로 만들고 docker-compose를 이용해서 실행을 합니다.


이런 용도로 사용되는 가장 유명한 프로그램이 ansible 입니다.

gradle 프로젝트 빌드 : 실행 파일을 생성
gradlew clean build
리눅스일 경우 : ./gradlew clean build

Dockerfile을 이용해서 도커 이미지 생성

docker build -f 도커파일명 -t 이미지이름 디렉토리


docker build -f Dockerfile -t springapp:1.0.0 .

이미지를 컨테이너로 변환

docker run -p 80:8080 springapp:1.0.0

docker run --name springapp -dit -p 80:8080 springapp:1.0.0


도커허브에 업로드 하기
이미지이름 변경 : docker tag 이미지이름 계정이름/이미지이름:버전
docker tag springapp:1.0.0 wonjungkim/springapp:latest

이미지 업로드 : docker push 계정이름/이미지이름:버전
docker push wonjungkim/springapp

docker run --name springapp -dit -p 80:8080 /springapp

docker-compose.yml는 이미지를 기반으로해서 컨테이너를 생성하는 스크립트 파일
docker-compose -f docker-compose.yml up --build







