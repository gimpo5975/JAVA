▣ 제네릭 (Generic)  => 제네릭은 클래스 내에서 사용되는 타입을 클래스가 정의할 때가 아닌 객체를 생성할 때 정의하겠다는 의미
	- 하나의 코드를 다양한 타입의 객체에 재사용하는 객체 지향 기법
	- 클래스, 인터페이스, 메서드를 정의할 때 타입을 변수로 사용
	- 장점 
		. 컴파일할 때 타입을 점검하기 때문에 실행 도중 발생할 오류를 미리 방지할 수 있음
		. 불필요한 타입 변환이 없어 프로그램 성능이 향상된다.

1. 제네릭 클래스와 인터페이스
	- 타입을 변수로 사용하는 클래스와 인터페이스
	- <>(다이아몬드연산자) 내부에 타입 매개변수를 표시
	- 타입매개변수는 객체를 생성할 때 구체적인 타입으로 대체함
	- 제네릭 클래스의 타입 매개변수는 필드나 메서드의 타입

	- 타입매개변수 : 영문대문자면 어떤 것이 사용 가능
		. 일반 타입	T  	type
		. 원소(요소) 	E	element
		. 키		K	key
		. 숫자		N	number
		. 값		V 	value 

	- 제네릭 클래스의 생성자
		제네릭클래스<적용할타입> 변수 = new 제네릭클래스<적용할타입>( );
		제네릭클래스<적용할타입> 변수 = new 제네릭클래스<>( );
	- 기본타입(int, long, byte, boolean,...)은 사용할 수 없고, 참조 타입만 사용 가능

2. 제네릭 상속 및 타입 한정
	- 자식 객체를 부모 타입 변수에 대입
	- 타입 매개변수의 범위를 특정 타입으로 제한
		. < T extends 특정 클래스> 반환타입 메서드명(..){  }
		. < T extends 인터페이스> 반환타입 메서드명(..){  }

3. 제네릭 메서드
	- 제네릭 메서드는 제네릭 클래스뿐만 아니라 일반 클래스의 멤버도 될 수 있다.
 	- 일반 클래스에서 제네릭 메서드를 정의할 때는 타입 매개변수를 반환 타입 앞에 둠
		<타입매개변수> 반환타입 메서드명(..) {  }

	- 제네릭 메서드의 타입 매개변수는 메서드의 반환 타입이나 매개변수의 타입으로 사용할 수 있음
	- 제네릭 메서드를 호출할 때는 컴파일러가 매개변수 값의 타입을 보고 구체적인 타입을 추정할 수 있어 생략 가능


=======================
▣  compareTo(Object obl)
   	- 값을 비교
	- 비교할 값이 매개값으로 받은 값보다 크면 : 1 을 반환
	  비교할 값이 매개값으로 받은 값보다 작으면 : -1을 반환
	 비교할 값이 매개값과 같으면 0을 반환
